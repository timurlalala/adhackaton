from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states import CreateCharacter
from aiogram.filters.state import StateFilter
from storage import user_data, character_id_counter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from states import EditCharacter

router = Router()


# --- –•–µ–ª–ø–µ—Ä –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_choice_keyboard(step: str, options: list[str]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=opt, callback_data=f"{step}_{i}")]
            for i, opt in enumerate(options)
        ]
        + [
            [InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—à—É —Å–∞–º", callback_data=f"{step}_custom")],
            [
                InlineKeyboardButton(
                    text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart_creation"
                )
            ],
        ]
    )


# --- –°–±—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ---
@router.callback_query(F.data == "restart_creation")
async def restart_creation(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–±—Ä–æ—à–µ–Ω–æ. –í–≤–µ–¥–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"
    )
    await state.set_state(CreateCharacter.waiting_for_name)
    await callback.answer()


# --- –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è ---
@router.message(F.text == "üÜï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
async def start_create(message: types.Message, state: FSMContext):
    await state.clear()
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º user_id –æ–¥–∏–Ω —Ä–∞–∑
    await state.update_data(user_id=message.from_user.id)
    await message.answer("üë§ –í–≤–µ–¥–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    await state.set_state(CreateCharacter.waiting_for_name)


@router.message(CreateCharacter.waiting_for_name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        "üìù –í–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n"
        "üëâ –ü–æ–¥—É–º–∞–π:\n‚Ä¢ –ö—Ç–æ –æ–Ω —Ç–∞–∫–æ–π?\n‚Ä¢ –ó–∞—á–µ–º –æ–Ω —Ç–µ–±–µ –Ω—É–∂–µ–Ω?\n\n"
        "‚ú® –ü—Ä–∏–º–µ—Ä:\n¬´–ë–∞—Ä–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –Ω–∞–ø–∏—Ç–∫–∏.¬ª"
    )
    await state.set_state(CreateCharacter.waiting_for_description)


@router.message(CreateCharacter.waiting_for_description)
async def get_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(
        "üé≠ –í—ã–±–µ—Ä–∏ –∞—Ä—Ö–µ—Ç–∏–ø:",
        reply_markup=get_choice_keyboard(
            "arch", ["ü§ù –î—Ä—É–≥", "üßô –ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "üòà –í—Ä–∞–≥", "üíò –†–æ–º–∞–Ω—Ç–∏–∫"]
        ),
    )
    await state.set_state(CreateCharacter.waiting_for_archetype)


# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ---
@router.callback_query(
    StateFilter(CreateCharacter),  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ —Å—é–¥–∞
    F.data.regexp(r"^(arch|intellect|emot|speech|conflict|taboo|feat)_(\d+|custom)$"),
)
async def handle_choice(callback: types.CallbackQuery, state: FSMContext):
    step_map = {
        "arch": ("archetype", ["–î—Ä—É–≥", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "–í—Ä–∞–≥", "–†–æ–º–∞–Ω—Ç–∏–∫"]),
        "intellect": ("intellect", ["–ü—Ä–æ—Å—Ç–æ–π", "–£–º–Ω—ã–π", "–§–∏–ª–æ—Å–æ—Ñ"]),
        "emot": ("emotionality", ["–•–æ–ª–æ–¥–Ω—ã–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π"]),
        "speech": ("speech", ["–°—É—Ö–æ–π", "–û–±—Ä–∞–∑–Ω—ã–π", "–®—É—Ç–ª–∏–≤—ã–π", "–¶–∏—Ç–∞—Ç–Ω—ã–π"]),
        "conflict": ("conflict", ["–°–ø–æ–∫–æ–µ–Ω", "–Ø–∑–≤–∏—Ç–µ–ª–µ–Ω", "–£—Ö–æ–¥–∏—Ç –æ—Ç —Ç–µ–º—ã"]),
        "taboo": ("taboo", ["–ù–µ –º–∞—Ç–µ—Ä–∏—Ç—Å—è", "–ù–µ –≤—Ä–µ—Ç", "–ù–µ –∫—Ä–∏—Ç–∏–∫—É–µ—Ç"]),
        "feat": ("features", ["–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ñ—Ä–∞–∑—É", "–ú—É—Ä—á–∏—Ç", "–©—ë–ª–∫–∞–µ—Ç –ø–∞–ª—å—Ü–∞–º–∏"]),
    }

    key, label_list = step_map[callback.data.split("_")[0]]
    choice = callback.data.split("_")[1]

    if choice == "custom":
        await state.update_data(_custom_step=key)
        await state.set_state(CreateCharacter.waiting_for_custom_prompt)
        await callback.message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:")
        return

    await state.update_data({key: label_list[int(choice)]})
    await callback.answer()
    await ask_next_step(callback.message, state)


# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è "–Ω–∞–ø–∏—à—É —Å–∞–º" ---
@router.message(CreateCharacter.waiting_for_custom_prompt)
async def handle_custom_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    key = data.get("_custom_step")
    if key:
        await state.update_data({key: message.text})
        await ask_next_step(message, state)


# --- –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —à–∞–≥–∞–º —Å–æ–∑–¥–∞–Ω–∏—è ---
async def ask_next_step(message: types.Message, state: FSMContext):
    data = await state.get_data()

    if "intellect" not in data:
        await message.answer(
            "üß† –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞:",
            reply_markup=get_choice_keyboard(
                "intellect", ["–ü—Ä–æ—Å—Ç–æ–π", "–£–º–Ω—ã–π", "–§–∏–ª–æ—Å–æ—Ñ"]
            ),
        )
        await state.set_state(CreateCharacter.waiting_for_intellect)

    elif "emotionality" not in data:
        await message.answer(
            "‚ù§Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
            reply_markup=get_choice_keyboard(
                "emot", ["–•–æ–ª–æ–¥–Ω—ã–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π"]
            ),
        )
        await state.set_state(CreateCharacter.waiting_for_emotionality)

    elif "speech" not in data:
        await message.answer(
            "üó£ –ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂?",
            reply_markup=get_choice_keyboard(
                "speech", ["–°—É—Ö–æ", "–û–±—Ä–∞–∑–Ω–æ", "–®—É—Ç–ª–∏–≤–æ", "–¶–∏—Ç–∞—Ç–∞–º–∏"]
            ),
        )
        await state.set_state(CreateCharacter.waiting_for_speech)

    elif "conflict" not in data:
        await message.answer(
            "üß© –ö–∞–∫ –≤–µ–¥—ë—Ç —Å–µ–±—è –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ?",
            reply_markup=get_choice_keyboard(
                "conflict", ["–°–ø–æ–∫–æ–µ–Ω", "–Ø–∑–≤–∏—Ç–µ–ª–µ–Ω", "–£—Ö–æ–¥–∏—Ç –æ—Ç —Ç–µ–º—ã"]
            ),
        )
        await state.set_state(CreateCharacter.waiting_for_conflict)

    elif "taboo" not in data:
        await message.answer(
            "üõë –ß–µ–≥–æ –æ–Ω –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–µ—Ç?",
            reply_markup=get_choice_keyboard(
                "taboo", ["–ù–µ –º–∞—Ç–µ—Ä–∏—Ç—Å—è", "–ù–µ –≤—Ä—ë—Ç", "–ù–µ –∫—Ä–∏—Ç–∏–∫—É–µ—Ç"]
            ),
        )
        await state.set_state(CreateCharacter.waiting_for_taboo)

    elif "features" not in data:
        await message.answer(
            "ü™Ñ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞? –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–∏–≤—ã—á–∫–∏, –∑–≤—É–∫–∏, –∂–µ—Å—Ç—ã, –ª—é–±–∏–º—ã–µ —Ñ—Ä–∞–∑—ã.",
            reply_markup=get_choice_keyboard(
                "feat", ["–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ñ—Ä–∞–∑—É", "–ú—É—Ä—á–∏—Ç", "–ì–∞–≤–∫–∞–µ—Ç"]
            ),
        )
        await state.set_state(CreateCharacter.waiting_for_features)

    else:
        await finish_character(message, state)


# --- –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ---
async def finish_character(message: types.Message, state: FSMContext):
    global character_id_counter

    data = await state.get_data()
    # —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë–º –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç user_id, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    user_id = data["user_id"]

    instruction = (
        f"üé≠ –ê—Ä—Ö–µ—Ç–∏–ø: {data['archetype']}\n"
        f"üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {data['intellect']}\n"
        f"‚ù§Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {data['emotionality']}\n"
        f"üó£ –ú–∞–Ω–µ—Ä–∞ —Ä–µ—á–∏: {data['speech']}\n"
        f"üß© –ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ: {data['conflict']}\n"
        f"üõë –ó–∞–ø—Ä–µ—Ç—ã: {data['taboo']}\n"
        f"ü™Ñ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {data['features']}"
    )

    character = {
        "id": character_id_counter,
        "name": data["name"],
        "description": data["description"],
        "instruction": instruction,
    }
    character_id_counter += 1

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ —Ç–µ–º —Å–∞–º—ã–º user_id
    user_data.setdefault(user_id, {"characters": [], "selected": None})[
        "characters"
    ].append(character)

    # print("user_data —Ç–µ–ø–µ—Ä—å:", user_data)  # debug

    await message.answer(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ ¬´{character['name']}¬ª —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    await state.clear()
