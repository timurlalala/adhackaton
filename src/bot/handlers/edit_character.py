# handlers/edit_character.py

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from storage import user_data
from states import EditCharacter

router = Router()


# 1) –ú–µ–Ω—é –ø–æ–ª–µ–π –ø–æ –Ω–∞–∂–∞—Ç–∏—é ¬´edit_<id>¬ª
@router.callback_query(F.data.regexp(r"^edit_(\d+)$"))
async def edit_menu(callback: types.CallbackQuery, state: FSMContext):
    cid = int(callback.data.split("_")[1])
    await state.update_data(editing_id=cid)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ò–º—è", callback_data="field_name")],
            [
                InlineKeyboardButton(
                    text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="field_description"
                )
            ],
            [InlineKeyboardButton(text="üé≠ –ê—Ä—Ö–µ—Ç–∏–ø", callback_data="field_arch")],
            [
                InlineKeyboardButton(
                    text="üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç", callback_data="field_intellect"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ù§Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", callback_data="field_emotionality"
                )
            ],
            [InlineKeyboardButton(text="üó£ –ú–∞–Ω–µ—Ä–∞ —Ä–µ—á–∏", callback_data="field_speech")],
            [InlineKeyboardButton(text="üß© –ö–æ–Ω—Ñ–ª–∏–∫—Ç", callback_data="field_conflict")],
            [InlineKeyboardButton(text="üõë –ó–∞–ø—Ä–µ—Ç—ã", callback_data="field_taboo")],
            [
                InlineKeyboardButton(
                    text="ü™Ñ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="field_features"
                )
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")],
        ]
    )

    await callback.message.answer("‚úèÔ∏è –ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?", reply_markup=kb)
    await state.set_state(EditCharacter.choosing_field)
    await callback.answer()


# 2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–ª–µ (—Ç–æ–ª—å–∫–æ –≤ choosing_field)
@router.callback_query(
    StateFilter(EditCharacter.choosing_field), F.data.startswith("field_")
)
async def choose_field(callback: types.CallbackQuery, state: FSMContext):
    step = callback.data.split("_", 1)[1]
    await state.update_data(editing_field=step)

    if step in ("name", "description"):
        prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:" if step == "name" else "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
        await callback.message.answer(f"‚úçÔ∏è {prompt}")
    else:
        options_map = {
            "arch": ["ü§ù –î—Ä—É–≥", "üßô –ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "üòà –í—Ä–∞–≥", "üíò –†–æ–º–∞–Ω—Ç–∏–∫"],
            "intellect": ["–ü—Ä–æ—Å—Ç–æ–π", "–£–º–Ω—ã–π", "–§–∏–ª–æ—Å–æ—Ñ"],
            "emotionality": ["–•–æ–ª–æ–¥–Ω—ã–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π"],
            "speech": ["–°—É—Ö–æ–π", "–û–±—Ä–∞–∑–Ω—ã–π", "–®—É—Ç–ª–∏–≤—ã–π", "–¶–∏—Ç–∞—Ç–Ω—ã–π"],
            "conflict": ["–°–ø–æ–∫–æ–µ–Ω", "–Ø–∑–≤–∏—Ç–µ–ª–µ–Ω", "–£—Ö–æ–¥–∏—Ç –æ—Ç —Ç–µ–º—ã"],
            "taboo": ["–ù–µ –º–∞—Ç–µ—Ä–∏—Ç—Å—è", "–ù–µ –≤—Ä–µ—Ç", "–ù–µ –∫—Ä–∏—Ç–∏–∫—É–µ—Ç"],
            "features": ["–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ñ—Ä–∞–∑—É", "–ú—É—Ä—á–∏—Ç", "–©—ë–ª–∫–∞–µ—Ç –ø–∞–ª—å—Ü–∞–º–∏"],
        }
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=opt, callback_data=f"{step}_{i}")]
                for i, opt in enumerate(options_map[step])
            ]
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç "–ù–∞–ø–∏—à—É —Å–∞–º"
        kb.inline_keyboard.append(
            [InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—à—É —Å–∞–º", callback_data=f"{step}_custom")]
        )
        await callback.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {step}:", reply_markup=kb
        )

    await state.set_state(EditCharacter.editing_value)
    await callback.answer()


# 2b) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "..._custom"
@router.callback_query(
    StateFilter(EditCharacter.choosing_field),
    F.data.regexp(
        r"^(name|description|arch|intellect|emotionality|speech|conflict|taboo|features)_custom$"
    ),
)
async def choose_custom_field(callback: types.CallbackQuery, state: FSMContext):
    step = callback.data.split("_", 1)[0]
    await state.update_data(editing_field=step)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:")
    await state.set_state(EditCharacter.editing_value)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞  —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤ editing_value)
@router.message(StateFilter(EditCharacter.editing_value))
async def apply_custom_edit(message: types.Message, state: FSMContext):
    data = await state.get_data()
    uid = message.from_user.id
    cid = data["editing_id"]
    field = data["editing_field"]
    new_value = message.text

    for c in user_data.get(uid, {}).get("characters", []):
        if c["id"] == cid:
            c[field] = new_value
            break

    # –ö–Ω–æ–ø–∫–∏ —Å—Ç–æ–ª–±–∏–∫–æ–º
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÅ –ï—â—ë –æ–¥–Ω–æ –ø–æ–ª–µ", callback_data=f"edit_{cid}"
                )
            ],
            [InlineKeyboardButton(text="‚úîÔ∏è –ì–æ—Ç–æ–≤–æ", callback_data="edit_finish")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")],
        ]
    )
    await message.answer(f"‚úÖ –ü–æ–ª–µ ¬´{field}¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb)
    await state.set_state(EditCharacter.choosing_field)


# 3b) –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ç–æ–≤–æ–π –æ–ø—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤ editing_value)
@router.callback_query(
    StateFilter(EditCharacter.editing_value),
    F.data.regexp(
        r"^(arch|intellect|emotionality|speech|conflict|taboo|features)_(\d+)$"
    ),
)
async def apply_choice_edit(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    uid = callback.from_user.id
    cid = data["editing_id"]
    field = data["editing_field"]
    idx = int(callback.data.split("_")[1])

    options_map = {
        "arch": ["ü§ù –î—Ä—É–≥", "üßô –ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "üòà –í—Ä–∞–≥", "üíò –†–æ–º–∞–Ω—Ç–∏–∫"],
        "intellect": ["–ü—Ä–æ—Å—Ç–æ–π", "–£–º–Ω—ã–π", "–§–∏–ª–æ—Å–æ—Ñ"],
        "emotionality": ["–•–æ–ª–æ–¥–Ω—ã–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π"],
        "speech": ["–°—É—Ö–æ–π", "–û–±—Ä–∞–∑–Ω—ã–π", "–®—É—Ç–ª–∏–≤—ã–π", "–¶–∏—Ç–∞—Ç–Ω—ã–π"],
        "conflict": ["–°–ø–æ–∫–æ–µ–Ω", "–Ø–∑–≤–∏—Ç–µ–ª–µ–Ω", "–£—Ö–æ–¥–∏—Ç –æ—Ç —Ç–µ–º—ã"],
        "taboo": ["–ù–µ –º–∞—Ç–µ—Ä–∏—Ç—Å—è", "–ù–µ –≤—Ä–µ—Ç", "–ù–µ –∫—Ä–∏—Ç–∏–∫—É–µ—Ç"],
        "features": ["–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ñ—Ä–∞–∑—É", "–ú—É—Ä—á–∏—Ç", "–©—ë–ª–∫–∞–µ—Ç –ø–∞–ª—å—Ü–∞–º–∏"],
    }
    for c in user_data.get(uid, {}).get("characters", []):
        if c["id"] == cid:
            c[field] = options_map[field][idx]
            break

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÅ –ï—â—ë –æ–¥–Ω–æ –ø–æ–ª–µ", callback_data=f"edit_{cid}"
                )
            ],
            [InlineKeyboardButton(text="‚úîÔ∏è –ì–æ—Ç–æ–≤–æ", callback_data="edit_finish")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")],
        ]
    )
    await callback.message.answer(f"‚úÖ –ü–æ–ª–µ ¬´{field}¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb)
    await state.set_state(EditCharacter.choosing_field)
    await callback.answer()


# 4) –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data == "edit_finish")
async def finish_edit(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    # –°—Ä–∞–∑—É –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    uid = callback.from_user.id
    chars = user_data.get(uid, {}).get("characters", [])
    if not chars:
        return await callback.message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")
    for c in chars:
        text = f"üë§ <b>{c['name']}</b>\nüìù {c['description']}"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data=f"select_{c['id']}"
                    ),
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{c['id']}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{c['id']}"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{c['id']}"
                    )
                ],
            ]
        )
        await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


# 5) –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data == "cancel_edit")
async def cancel_edit(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –ò —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    uid = callback.from_user.id
    chars = user_data.get(uid, {}).get("characters", [])
    if not chars:
        return await callback.message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")
    for c in chars:
        text = f"üë§ <b>{c['name']}</b>\nüìù {c['description']}"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data=f"select_{c['id']}"
                    ),
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{c['id']}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{c['id']}"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{c['id']}"
                    )
                ],
            ]
        )
        await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()
