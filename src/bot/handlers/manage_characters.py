# handlers/manage_characters.py
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from storage import user_data

router = Router()


@router.message(F.text == "üìÅ –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏")
async def show_characters(message: types.Message):
    uid = message.from_user.id
    chars = user_data.get(uid, {}).get("characters", [])
    if not chars:
        return await message.answer("–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")

    for c in chars:
        text = f"üë§ {c['name']}\nüìù {c['description']}"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data=f"select_{c['id']}"
                    ),
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{c['id']}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{c['id']}"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{c['id']}"
                    ),
                ],
            ]
        )
        await message.answer(text, reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data.startswith("select_"))
async def select_character(callback: types.CallbackQuery):
    uid = callback.from_user.id
    cid = int(callback.data.split("_")[1])
    user_data[uid]["selected"] = cid
    await callback.answer("–í—ã–±—Ä–∞–Ω–æ ‚úÖ")


@router.callback_query(F.data.startswith("delete_"))
async def delete_character(callback: types.CallbackQuery):
    uid = callback.from_user.id
    cid = int(callback.data.split("_")[1])
    user_data[uid]["characters"] = [
        c for c in user_data[uid]["characters"] if c["id"] != cid
    ]
    if user_data[uid]["selected"] == cid:
        user_data[uid]["selected"] = None
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ üóë")


@router.callback_query(F.data.startswith("details_"))
async def show_details(callback: types.CallbackQuery):
    uid = callback.from_user.id
    char_id = int(callback.data.split("_")[1])
    # –∏—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    chars = user_data.get(uid, {}).get("characters", [])
    char = next((c for c in chars if c["id"] == char_id), None)
    if not char:
        return await callback.message.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
    text = (
        f"üë§ <b>{char['name']}</b>\n\n"
        f"üìù <i>–û–ø–∏—Å–∞–Ω–∏–µ:</i> {char['description']}\n\n"
        f"üõ†Ô∏è <i>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è LLM:</i>\n{char.get('instruction','(–Ω–µ—Ç)')}"
    )
    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()
